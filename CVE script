import nmap
import re
import os
import tkinter as tk
from tkinter import messagebox, scrolledtext
import pandas as pd

# Spécifiez le chemin de Nmap
NMAP_PATH = r"C:\Program Files (x86)\Nmap\nmap.exe"

# Vérifiez si Nmap est installé au chemin spécifié
if not os.path.exists(NMAP_PATH):
    print(f"Nmap executable not found at {NMAP_PATH}. Please check the path and try again.")
    exit(1)

def scan_vulnerabilities(target):
    nm = nmap.PortScanner(nmap_search_path=(NMAP_PATH,))
    print(f"Scanning {target} for open ports and services...")
    # Exécutez un scan Nmap avec des scripts NSE pour détecter les vulnérabilités
    nm.scan(target, arguments='-sV --script=vulners,version')
    scan_data = nm.scanstats()
    print(f"Scan completed in {scan_data['elapsed']} seconds")

    vulnerabilities = []

    for host in nm.all_hosts():
        for proto in nm[host].all_protocols():
            lport = nm[host][proto].keys()
            for port in lport:
                service = nm[host][proto][port]
                product = service.get('product', '')
                version = service.get('version', '')
                cpe = service.get('cpe', '')
                if 'script' in service:
                    for script_id, script_output in service['script'].items():
                        if 'vulners' in script_id:
                            vulns = extract_vulns_from_output(script_output)
                            for vuln in vulns:
                                vulnerabilities.append({
                                    'host': host,
                                    'port': port,
                                    'service': service['name'],
                                    'product': product,
                                    'version': version,
                                    'cpe': cpe,
                                    'cve': vuln['cve'],
                                    'cvss': vuln['cvss'],
                                    'exploit_available': vuln['exploit']
                                })

    return vulnerabilities

def extract_vulns_from_output(output):
    vulns = []
    lines = output.split('\n')
    for line in lines:
        match = re.search(r'(\S+)\s+(\d+\.\d+)\s+(https://vulners.com/\S+)', line)
        if match:
            cve = match.group(1)
            cvss = match.group(2)
            exploit = "EXPLOIT" in line
            vulns.append({'cve': cve, 'cvss': cvss, 'exploit': exploit})
    return vulns

def display_vulnerabilities(vulnerabilities):
    if not vulnerabilities:
        return "No vulnerabilities found."
    else:
        result = ""
        vulnerabilities_with_exploits = [v for v in vulnerabilities if v['exploit_available']]
        if not vulnerabilities_with_exploits:
            result += "No vulnerabilities with available exploits found."
        else:
            result += f"Found {len(vulnerabilities_with_exploits)} vulnerabilities with available exploits:\n"
            for vuln in vulnerabilities_with_exploits:
                result += (f"\nHost: {vuln['host']}\n"
                           f"Port: {vuln['port']}\n"
                           f"Service: {vuln['service']}\n"
                           f"Product: {vuln['product']}\n"
                           f"Version: {vuln['version']}\n"
                           f"CPE: {vuln['cpe']}\n"
                           f"CVE: {vuln['cve']}\n"
                           f"CVSS Score: {vuln['cvss']}\n"
                           f"Exploit Available: {vuln['exploit_available']}\n")

        result += display_recommendations(vulnerabilities_with_exploits)
        return result

def display_recommendations(vulnerabilities):
    if not vulnerabilities:
        return "\nNo critical vulnerabilities to address."

    products = set()
    for vuln in vulnerabilities:
        product_info = f"{vuln['product']} {vuln['version']}"
        products.add(product_info)

    result = "\nRecommandations :\n"
    result += "\nCorriger les vulnérabilités critiques en priorité :\n"
    result += "Les vulnérabilités avec des scores CVSS élevés et des exploits disponibles doivent être corrigées immédiatement pour éviter tout risque de compromission.\n"

    result += "\nProduits affectés :\n"
    for product in products:
        result += f"<span class='critical'>{product}</span><br>"

    result += "\nMettre à jour les logiciels :\n"
    for product in products:
        result += f"Assurez-vous que {product} est à jour et que toutes les mises à jour de sécurité sont appliquées.<br>"

    result += "\nSurveiller les vulnérabilités restantes :\n"
    result += "Même si certaines vulnérabilités ont des scores CVSS faibles ou n'ont pas d'exploit disponible, elles doivent être surveillées et corrigées dès que possible.\n"

    return result

def on_scan_button_click():
    target = entry_target.get()
    if not target:
        messagebox.showerror("Erreur", "Veuillez entrer une adresse IP ou un nom DNS.")
        return
    
    results_text.delete(1.0, tk.END)
    vulnerabilities = scan_vulnerabilities(target)
    results = display_vulnerabilities(vulnerabilities)
    results_text.insert(tk.END, results)

    if vulnerabilities:
        generate_report(vulnerabilities)

def generate_report(vulnerabilities):
    df = pd.DataFrame(vulnerabilities)
    report_path = os.path.join(os.getcwd(), "vulnerability_report.html")

    # Count vulnerabilities by port
    vuln_count_by_port = df.groupby('port').size().to_dict()
    vuln_count_by_port_html = "".join(f"<p>Port {port}: {count} vulnerabilities</p>" for port, count in vuln_count_by_port.items())
    
    # Convert CVE column to hyperlink and highlight CVSS > 8
    df['cve'] = df['cve'].apply(lambda x: f'<a href="https://vulners.com/cve/{x}" target="_blank">{x}</a>')
    df['cvss'] = df['cvss'].apply(lambda x: f'<span class="highlight">{x}</span>' if float(x) > 8 else x)

    html = df.to_html(classes='table table-striped table-bordered', border=0, escape=False, index=False)
    recommendations = display_recommendations(vulnerabilities)

    with open(report_path, 'w') as f:
        f.write(f"""
        <html>
        <head>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.min.css">
        <style>
            body {{
                font-family: Arial, sans-serif;
                margin: 40px;
                background-color: #f5f5f5;
            }}
            h1 {{
                color: #333;
            }}
            .table {{
                width: 100%;
                margin-bottom: 1rem;
                color: #212529;
                background-color: #fff;
            }}
            .table th {{
                background-color: #343a40;
                color: #fff;
            }}
            .table-striped tbody tr:nth-of-type(odd) {{
                background-color: rgba(0,0,0,.05);
            }}
            .table-bordered {{
                border: 1px solid #dee2e6;
            }}
            .table-bordered th, .table-bordered td {{
                border: 1px solid #dee2e6;
            }}
            .highlight {{
                color: #d9534f;
                font-weight: bold;
            }}
            .critical {{
                color: #d9534f;
                font-weight: bold;
            }}
        </style>
        </head>
        <body>
        <h1>Rapport de Vulnérabilités</h1>
        <h2>Total Vulnerabilities: {len(vulnerabilities)}</h2>
        <h3>Vulnerabilities by Port:</h3>
        {vuln_count_by_port_html}
        {html}
        <h2>Recommandations</h2>
        <p>{recommendations}</p>
        </body>
        </html>
        """)
    messagebox.showinfo("Rapport", f"Le rapport a été généré avec succès : {report_path}")

# Création de la fenêtre principale
root = tk.Tk()
root.title("CVE Scanner")
root.geometry("600x400")

# Création des widgets
frame = tk.Frame(root)
frame.pack(pady=20)

label_target = tk.Label(frame, text="Adresse IP ou nom DNS:")
label_target.grid(row=0, column=0, padx=5, pady=5)

entry_target = tk.Entry(frame, width=30)
entry_target.grid(row=0, column=1, padx=5, pady=5)

scan_button = tk.Button(frame, text="Scan", command=on_scan_button_click)
scan_button.grid(row=0, column=2, padx=5, pady=5)

results_text = scrolledtext.ScrolledText(root, width=80, height=20)
results_text.pack(padx=10, pady=10)

# Exécution de la boucle principale
root.mainloop()
